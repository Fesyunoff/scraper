//+build !swipe

// Code generated by Swipe v2.0.0-beta6. DO NOT EDIT.

package transport

import (
	"context"
	"time"

	"github.com/fesyunoff/availability/pkg/api/service"
	"github.com/fesyunoff/availability/pkg/types"
	"github.com/go-kit/kit/log"
)

type ScraperRequestLoggingMiddleware struct {
	next   service.ScraperRequest
	logger log.Logger
}

func (s *ScraperRequestLoggingMiddleware) GetAvailability(ctx context.Context, site string) (string, error) {
	var (
		result string
		err    error
	)
	defer func(now time.Time) {
		logErr := err
		if le, ok := err.(interface{ LogError() error }); ok {
			logErr = le.LogError()
		}
		s.logger.Log("method", "GetAvailability", "took", time.Since(now), "site", site, "result", result, "err", logErr)
	}(time.Now())
	result, err = s.next.GetAvailability(ctx, site)
	return result, err
}

func (s *ScraperRequestLoggingMiddleware) GetResponceTime(ctx context.Context, limit string) (string, error) {
	var (
		result string
		err    error
	)
	defer func(now time.Time) {
		logErr := err
		if le, ok := err.(interface{ LogError() error }); ok {
			logErr = le.LogError()
		}
		s.logger.Log("method", "GetResponceTime", "took", time.Since(now), "limit", limit, "result", result, "err", logErr)
	}(time.Now())
	result, err = s.next.GetResponceTime(ctx, limit)
	return result, err
}

func (s *ScraperRequestLoggingMiddleware) GetStatistics(ctx context.Context, hours string, limit string) ([]types.Stat, error) {
	var (
		result []types.Stat
		err    error
	)
	defer func(now time.Time) {
		logErr := err
		if le, ok := err.(interface{ LogError() error }); ok {
			logErr = le.LogError()
		}
		s.logger.Log("method", "GetStatistics", "took", time.Since(now), "hours", hours, "limit", limit, "result", len(result), "err", logErr)
	}(time.Now())
	result, err = s.next.GetStatistics(ctx, hours, limit)
	return result, err
}

func NewLoggingScraperRequestMiddleware(s service.ScraperRequest, logger log.Logger) service.ScraperRequest {
	return &ScraperRequestLoggingMiddleware{next: s, logger: logger}
}
